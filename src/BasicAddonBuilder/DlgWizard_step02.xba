<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="DlgWizard_step02" script:language="StarBasic">REM  *****  BASIC  *****
&apos;______________________________________________________________________________
&apos;	
&apos;	BasicAddonBuilder - $ Version: 0.6.10 $ 
&apos;	Copyright (C) 2006-2008 Paolo Mantovani
&apos;	
&apos;	A wizard to export basic libraries as Add on&apos;s
&apos;
&apos;	This library is free software; you can redistribute it and/or
&apos;	modify it under the terms of the GNU Lesser General Public
&apos;	License as published by the Free Software Foundation.
&apos;	
&apos;	This library is distributed in the hope that it will be useful,
&apos;	but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos;	Lesser General Public License for more details.
&apos;	
&apos;	Please email me with any bug reports, questions or comments:
&apos;	paolomantovani@openoffice.org
&apos;______________________________________________________________________________
&apos;	
&apos;	Module DlgWizard_step02:
&apos;	Management of the step 2 of the dialog.
&apos;______________________________________________________________________________
&apos;
&apos;
&apos; Declarations:
Option Explicit

Public mOtherFiles()

&apos;______________________________________________________________________________
Sub Step02_Initialize()

	With g_oDlgWizardModel
		.lbOtherFiles.StringItemList() = mOtherFiles()
&apos;set step title/description
		.lblStepTitle.Label = GetRoadmapItem(2).Label
		.lblStepDescription.Label = _
			GetResString(&quot;Select the options that you want activate for the Extension to create&quot;)
&apos;set lib name		
		If g_bOnlyPython = True Then
			If g_sExtensionWithOnlyPythonName &lt;&gt; &quot;&quot; Then
				.txtExtPyOnlyName.Text = g_sExtensionWithOnlyPythonName
			Else	
				.txtExtPyOnlyName.Text = Replace(g_sPythonLibrary, GetPathSeparator(), &quot;_&quot;)
			End If
			.txtExtPyOnlyName.Enabled = True
			.txtExtPyOnlyName.Readonly = False 
		Else
			&apos; gray color for disabled
			.txtExtPyOnlyName.Enabled = False
			.txtExtPyOnlyName.BackgroundColor = RGB(219, 219, 219)
			If .txtExtPyOnlyName.Text &lt;&gt; &quot;&quot; Then .txtExtPyOnlyName.Text = &quot;&quot;
			
		End If
		
		
&apos; enable/disable general controls
		.cmdBack.Enabled = True
		.cmdNext.Enabled = True
		
		If g_bOnlyPython = True AND .txtExtPyOnlyName.Text = &quot;&quot; Then
				.cmdNext.Enabled = False
		End If
		
&apos; enable/disable roadmap items
&apos;		.Roadmap(0).Enabled = True

	End With
	
End Sub

&apos;______________________________________________________________________________
Sub chkToolbar_statusChanged(oEvent As Object)
	UpdateRoadmapItems
End Sub

&apos;______________________________________________________________________________
Sub chkOfficeMenu_statusChanged(oEvent As Object)
	UpdateRoadmapItems
End Sub

&apos;______________________________________________________________________________
Sub chkAddonMenu_statusChanged(oEvent As Object)
	UpdateRoadmapItems
End Sub

&apos;______________________________________________________________________________
Sub chkHelpMenu_statusChanged(oEvent As Object)
	UpdateRoadmapItems
End Sub

&apos;______________________________________________________________________________
Sub UpdateRoadmapItems()
Dim oRoadmapModel As Object
Dim oRoadmapItem As Object
Dim sLabel As String
Dim I As Integer
Dim iPos As Integer
Dim iCurID As Integer

	oRoadmapModel = g_oDlgWizardModel.Roadmap
	
	&apos;store the current ID
	iCurID = oRoadmapModel.CurrentItemID
	&apos;do a null selection
	oRoadmapModel.CurrentItemID = -1
	
	For I = oRoadmapModel.Count-4 To 2 Step -1
		oRoadmapModel.removeByIndex(I)
	Next I
	
	If g_oDlgWizardModel.chkToolbar.State = 1 Then
			iPos = oRoadmapModel.Count - 3
			InsertRoadmapItem(iPos, 3, GetResString(&quot;Office toolbar&quot;), True)
	End If
	
	If g_oDlgWizardModel.chkOfficeMenu.State = 1 Then
		iPos = oRoadmapModel.Count - 3
		InsertRoadmapItem(iPos, 4, GetResString(&quot;Office menubar&quot;), True)
	End If
	
	If g_oDlgWizardModel.chkAddonMenu.State = 1 Then
		iPos = oRoadmapModel.Count - 3
		InsertRoadmapItem(iPos, 5, GetResString(&quot;Addon menu&quot;), True)
	End If
	
	If g_oDlgWizardModel.chkHelpMenu.State = 1 Then
		iPos = oRoadmapModel.Count - 3
		InsertRoadmapItem(iPos, 6, GetResString(&quot;Help menu&quot;), True)
	End If
	
	&apos;force the refresh of the last roadmap items
	&apos;(probably a bug)
	For I = 7 To 9
		oRoadmapItem = getRoadmapItem(I)
		sLabel = oRoadmapItem.Label
		oRoadmapItem.Label = sLabel &amp; &quot; &quot;
		oRoadmapItem.Label = sLabel
	Next I
	
	&apos;restore the selected item
	oRoadmapModel.CurrentItemID = iCurID	
	

End Sub


Sub txtExtPyOnlyName_textModified(oEvent As Object)
Dim sExtName As String
Dim bEnable As Boolean
Dim I As Integer
Dim iLast As Integer
Dim iCur As Integer

	If g_bOnlyPython = True Then
		
		sExtName = Trim(oEvent.Source.Text)
		bEnable = (sExtName &lt;&gt; &quot;&quot;)
		g_oDlgWizardModel.cmdNext.Enabled = bEnable
		If Not bEnable Then
			g_oDlgWizardModel.cmdCreate.Enabled = False
		End If
		
		iLast = g_oDlgWizardModel.Roadmap.Count - 1
		iCur = iLast - 2	
		For I = iCur To iLast
			g_oDlgWizardModel.Roadmap.getByIndex(I).Enabled = bEnable
		Next I
				
	End If


End Sub

Sub txtExtPyOnlyName_focusLost(oEvent As Object)
&apos;ensure that there is a valid identifier
Dim sExtName As String
	
	sExtName = Trim(oEvent.Source.Text)
	g_sExtensionWithOnlyPythonName = sExtName
	oEvent.Source.Text = sExtName

End Sub

Sub cmdAddOtherFiles_onClick(oEvent As Object)
Dim lbOtherFiles
Dim sFileName As String
Dim mSelectedFiles()

	lbOtherFiles = g_oDlgWizardModel.lbOtherFiles
	mOtherFiles() = lbOtherFiles.StringItemList	
	mSelectedFiles() = ChooseAFiles()

	If UBound(mSelectedFiles()) &lt; 0 Then Exit Sub

	For Each sFileName In mSelectedFiles()
		If sFileName &lt;&gt; &quot;&quot; AND HasItem(mOtherFiles(), ConvertFromUrl(sFileName)) = False Then
			AppendItem(mOtherFiles(), ConvertFromUrl(sFileName))
		End If
	Next sFileName
	lbOtherFiles.StringItemList = mOtherFiles()

End Sub

Sub cmdAddOtherDir_onClick(oEvent As Object)
Dim lbOtherFiles
Dim sSelectedDir As String

	lbOtherFiles = g_oDlgWizardModel.lbOtherFiles
	mOtherFiles() = lbOtherFiles.StringItemList	
	
	sSelectedDir = ChooseADirectory()
	
	If sSelectedDir = &quot;&quot; OR HasItem(mOtherFiles(), ConvertFromUrl(sSelectedDir)) = True Then Exit Sub

	AppendItem(mOtherFiles(), ConvertFromUrl(sSelectedDir))

	lbOtherFiles.StringItemList = mOtherFiles()

End Sub

Sub cmdOthefFilesClear_onClick(oEvent As Object)
Dim NullList() as String
	g_oDlgWizardModel.lbOtherFiles.StringItemList() = NullList()
End Sub

Sub cmdOthefFilesDelete_onClick(oEvent As Object)

	Dim lbOtherFiles
	Dim nFisrtSelectedPos As Integer
	Dim nSelectedPos As Integer

	GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)
	
	lbOtherFiles = g_oDlgWizardModel.lbOtherFiles
	nFisrtSelectedPos = lbOtherFiles.SelectedItems(0)

	mOtherFiles() = RemoveSelected(lbOtherFiles)
	lbOtherFiles.StringItemList = mOtherFiles()

	nSelectedPos = 0
	If nFisrtSelectedPos &gt; 0 Then nSelectedPos = nFisrtSelectedPos - 1
	
	g_oDlgWizard.getControl(&quot;lbOtherFiles&quot;).selectItemPos(nSelectedPos, True)
		
	
End Sub
</script:module>