<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="DlgWizard_step03" script:language="StarBasic">REM  *****  BASIC  *****
&apos;______________________________________________________________________________
&apos;	
&apos;	BasicAddonBuilder - $ Version: 0.6.4 $ 
&apos;	Copyright (C) 2006-2008 Paolo Mantovani
&apos;	
&apos;	A wizard to export basic libraries as Add on&apos;s
&apos;
&apos;	This library is free software; you can redistribute it and/or
&apos;	modify it under the terms of the GNU Lesser General Public
&apos;	License as published by the Free Software Foundation.
&apos;	
&apos;	This library is distributed in the hope that it will be useful,
&apos;	but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos;	Lesser General Public License for more details.
&apos;	
&apos;	Please email me with any bug reports, questions or comments:
&apos;	paolomantovani@openoffice.org
&apos;______________________________________________________________________________
&apos;	
&apos;	Module DlgWizard_step03:
&apos;	Management of the step 3 of the dialog.
&apos;______________________________________________________________________________
&apos;
&apos;
&apos; Declarations:
Option Explicit

Public mToolbarTitleTranslations()
Public mToolbarUIElements()

&apos;______________________________________________________________________________
Sub Step03_Initialize()
Dim sTbTitle As String

	With g_oDlgWizardModel
&apos;set step title/description
		.lblStepTitle.Label = GetRoadmapItem(3).Label
		.lblStepDescription.Label = _
			GetResString(&quot;Define a customized toolbar for the Extension to create&quot;)
		
&apos; enable/disable general controls
		.cmdBack.Enabled = True
		.cmdNext.Enabled = True
		
&apos; enable/disable roadmap items
&apos;		.Roadmap(0).Enabled = True
	End With

	&apos;set an initial toolbar title
	If Not (&quot;Initialized&quot; = g_oDlgWizardModel.txtToolbarTitle.Tag) Then
		sTbTitle = GetResString(&quot;%tbname% toolbar&quot;)
		sTbTitle = StringReplace(sTbTitle, &quot;%tbname%&quot;, g_sDefaultLibrary)
		g_oDlgWizardModel.txtToolbarTitle.Text = sTbTitle
		ToolbarPreview_SetToolbarTitle(sTbTitle)
		g_oDlgWizardModel.txtToolbarTitle.Tag = &quot;Initialized&quot;
	End If

&apos; enable/disable this step controls 
	EnableStepControls()
	
End Sub


&apos;______________________________________________________________________________
Sub txtToolbarTitle_textModified(oEvent As Object)
	
	&apos;update the title in the preview frame
	ToolbarPreview_SetToolbarTitle(oEvent.Source.Text)
	
	&apos;enable/disable the &apos;Translate&apos; button
	g_oDlgWizardModel.cmdToolbarTitleTranslate.Enabled = _
		(oEvent.Source.Text &lt;&gt; &quot;&quot;)
End Sub


&apos;______________________________________________________________________________
Sub cmdToolbarTitleTranslate_onClick(oEvent As Object)
Dim iDlgResult As Integer
Dim sTitle As String

	sTitle = g_oDlgWizardModel.txtToolbarTitle.Text
	iDlgResult = ShowTranslateDialog(sTitle, mToolbarTitleTranslations(), False, Array())
	
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		&apos;update the title in the text control
		&apos;modify the text in the control view so the textModified event is raised
		g_oDlgWizard.getControl(&quot;txtToolbarTitle&quot;).Text = sTitle
		&apos;update the title in the preview frame
		ToolbarPreview_SetToolbarTitle(sTitle)	
	End If
	
End Sub

&apos;______________________________________________________________________________
Sub lstToolbarPreviewType_itemStateChanged(oEvent As Object)

	&apos;this prevents that this routine is called twice if
	&apos;the user clicks too fast...
	oEvent.Source.Model.Enabled = False
	
	Select Case oEvent.Selected
		Case 0 : ToolbarPreview_SetPreviewType(LC_SMALL_ICO)
		Case 1 : ToolbarPreview_SetPreviewType(HC_SMALL_ICO)
		Case 2 : ToolbarPreview_SetPreviewType(LC_BIG_ICO)
		Case 3 : ToolbarPreview_SetPreviewType(HC_BIG_ICO)
	End Select
	
	EnableStepControls()
	
	oEvent.Source.Model.Enabled = True
	oEvent.Source.setFocus()
End Sub

&apos;______________________________________________________________________________
Sub cmdToolbarMoveLeft_onClick(oEvent As Object)
Dim iPos As Integer
	iPos = ToolbarPreview_GetSelectedItemPos()
	
	&apos;move the item in the local toolbar structure
	SwapElements(mToolbarUIElements(), iPos-1, iPos)
	
	ToolbarPreview_MoveLeft(iPos)
	ToolbarPreview_SelectItemPos(iPos-1)
End Sub

&apos;______________________________________________________________________________
Sub cmdToolbarMoveRight_onClick(oEvent As Object)
Dim iPos As Integer
	iPos = ToolbarPreview_GetSelectedItemPos()
	
	&apos;move the item in the local toolbar structure
	SwapElements(mToolbarUIElements(), iPos, iPos+1)
	
	ToolbarPreview_MoveRight(iPos)
	ToolbarPreview_SelectItemPos(iPos+1)
End Sub

&apos;______________________________________________________________________________
Sub cmdToolbarAddButton_onClick(oEvent As Object)
Dim I As Integer
Dim bIsSeparator As Boolean
Dim aDesc As Object
Dim aImgDesc As Object
Dim iDlgResult As Integer

Static iNum As Integer
	
	I = ToolbarPreview_GetSelectedItemPos()+1
	bIsSeparator = False

	aDesc = CreateUIElementDescriptor()
	aDesc.DefaultText = GetResString(&quot;Toolbar button&quot;) &amp; &quot; &quot; &amp; iNum+1
	aDesc.IsSeparator = False
&apos;	aDesc.MacroDescriptor.Provider = g_sDefaultProvider
&apos;	aDesc.MacroDescriptor.Library = g_sDefaultLibrary
	
	iDlgResult = ShowItemPropertiesDialog(aDesc)
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		ToolbarPreview_AddItem(I, aDesc)
			
		&apos;add the item in the local toolbar structure
		InsertByIndex(mToolbarUIElements(), I, aDesc)
		
		&apos;the new item will appear selected
		ToolbarPreview_SelectItemPos(I)
	
		iNum = iNum + 1 &apos;update the local counter
	End If
	
End Sub

&apos;______________________________________________________________________________
Sub cmdToolbarAddSeparator_onClick(oEvent As Object)
Dim I As Integer
Dim aDesc As Object
Dim iDlgResult As Integer
	
	I = ToolbarPreview_GetSelectedItemPos()+1

	aDesc = CreateUIElementDescriptor()
	aDesc.DefaultText = &quot;--&quot; &amp; GetResString(&quot;separator&quot;) &amp; &quot;--&quot;
	aDesc.IsSeparator = True
	
	iDlgResult = ShowItemPropertiesDialog(aDesc)
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		ToolbarPreview_AddItem(I, aDesc)
		
		&apos;add the item in the local toolbar structure
		InsertByIndex(mToolbarUIElements(), I, aDesc)
		
		&apos;the new item will appear selected
		ToolbarPreview_SelectItemPos(I)
	End If
	
End Sub

&apos;______________________________________________________________________________
Sub cmdToolbarEdit_onClick(oEvent As Object)
Dim aToolbarItem As Object
Dim iDlgResult As Integer
	
	aToolbarItem = ToolbarPreview_GetSelectedItem()
	iDlgResult = ShowItemPropertiesDialog(aToolbarItem)
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		ToolbarPreview_UpdateControls()
	End if

End Sub

&apos;______________________________________________________________________________
Sub cmdToolbarDelete_onClick(oEvent As Object)
Dim I As Integer
Dim ImgIndex As Integer
	
	&apos;this prevents the routine is called twice if
	&apos;the user click too fast...
	oEvent.Source.Model.Enabled = False
	
	I = ToolbarPreview_GetSelectedItemPos()
	ToolbarPreview_Remove(I)

	&apos;remove the item in the local toolbar structure
	RemoveByIndex(mToolbarUIElements(), I)
	
	&apos;select nothing
	ToolbarPreview_SelectItemPos(-1)
	
End Sub


&apos;______________________________________________________________________________
Sub ToolbarPreview_SelectionChanged(iPos As Integer)
	EnableStepControls()
End Sub


&apos;______________________________________________________________________________
Sub EnableStepControls()
Dim iSel As Integer
Dim iCount As Integer

	iSel = ToolbarPreview_GetSelectedItemPos
	iCount = ToolbarPreview_GetItemCount
	With g_oDlgWizardModel
		.lstToolbarPreviewType.Enabled = True
		.cmdToolbarAddButton.Enabled = True
		.cmdToolbarAddSeparator.Enabled = True
		.cmdToolbarMoveLeft.Enabled = iSel &gt; 0
		.cmdToolbarMoveRight.Enabled = (iSel &gt;= 0) And (iSel &lt; (iCount-1))
		.cmdToolbarDelete.Enabled = iSel &gt;= 0
		.cmdToolbarEdit.Enabled = iSel &gt;= 0 &apos;And Not(ToolbarPreview_isSeparator(iSel))
	End With
	
End Sub


</script:module>