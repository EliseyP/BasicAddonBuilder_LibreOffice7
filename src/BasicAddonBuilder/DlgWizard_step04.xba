<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="DlgWizard_step04" script:language="StarBasic">REM  *****  BASIC  *****
&apos;______________________________________________________________________________
&apos;	
&apos;	BasicAddonBuilder - $ Version: 0.6.11 $ 
&apos;	Copyright (C) 2006-2008 Paolo Mantovani
&apos;	
&apos;	A wizard to export basic libraries as Add on&apos;s
&apos;
&apos;	This library is free software; you can redistribute it and/or
&apos;	modify it under the terms of the GNU Lesser General Public
&apos;	License as published by the Free Software Foundation.
&apos;	
&apos;	This library is distributed in the hope that it will be useful,
&apos;	but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos;	Lesser General Public License for more details.
&apos;	
&apos;	Please email me with any bug reports, questions or comments:
&apos;	paolomantovani@openoffice.org
&apos;______________________________________________________________________________
&apos;	
&apos;	Module DlgWizard_step04:
&apos;	Management of the step 4 of the dialog.
&apos;______________________________________________________________________________
&apos;
&apos;
&apos; Declarations:
Option Explicit


Public aRootOfficeMenu
Private aCurrentMenu


&apos;______________________________________________________________________________
Sub Step04_Initialize()

Dim lblOfficeMenuPreviewWindow
Dim lstOfficeMenuPreviewType
Dim iPreviewType 
Dim mMenuList()
Dim oListBox
	
	With g_oDlgWizardModel
&apos;set step title/description
		.lblStepTitle.Label = GetRoadmapItem(4).Label
		.lblStepDescription.Label = _
			GetResString(&quot;Define a customized top level menu that will be shown between the Tools and the Window menus&quot;)
		
&apos; enable/disable general controls
		.cmdBack.Enabled = True
		.cmdNext.Enabled = True
		
&apos; enable/disable roadmap items
&apos;		.Roadmap(0).Enabled = True

	End With

	lblOfficeMenuPreviewWindow = g_oDlgWizard.getControl(&quot;lblOfficeMenuPreviewWindow&quot;)
	lstOfficeMenuPreviewType = g_oDlgWizard.getControl(&quot;lstOfficeMenuPreviewType&quot;)
	
	Select Case lstOfficeMenuPreviewType.SelectedItemPos
		Case 0 : iPreviewType = LC_SMALL_ICO
		Case 1 : iPreviewType = HC_SMALL_ICO
		&apos;these are not available for menu
		&apos;Case 2 : iPreviewType = LC_BIG_ICO
		&apos;Case 3 : iPreviewType = HC_BIG_ICO
	End Select	
	
	&apos;oListBox = g_oDlgWizard.getControl(&quot;lstOfficeMenuTitle&quot;)
	&apos;get the new menu list
	&apos;GetMenuList(aRootOfficeMenu, mMenuList())
	&apos;replace all items
	&apos;oListBox.Model.StringItemList = mMenuList()
	
	MenuPreview_Initialize(lblOfficeMenuPreviewWindow, iPreviewType )
	RefreshMenuList()
	RefreshPreview()
	
&apos; enable/disable this step controls 
	EnableStepControls()
	
End Sub


&apos;______________________________________________________________________________
Sub lstOfficeMenuTitle_itemStateChanged(oEvent As Object)
Dim sNewMenuPath As String

	sNewMenuPath = oEvent.Source.SelectedItem()
	aCurrentMenu = GetMenuItem(aRootOfficeMenu, sNewMenuPath)
	RefreshPreview
	
End Sub


&apos;______________________________________________________________________________
Sub cmdOfficeMenuTitleEdit_onClick(oEvent As Object)
Dim iDlgResult As Integer

	iDlgResult = ShowItemPropertiesDialog(aCurrentMenu)
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		RefreshMenuList
	End If
	
End Sub


&apos;______________________________________________________________________________
Sub lstOfficeMenuPreviewType_itemStateChanged(oEvent As Object)
	
	&apos;this prevents the routine is called twice if
	&apos;the user click too fast...
	oEvent.Source.Model.Enabled = False
	
	Select Case oEvent.Selected
		Case 0 : MenuPreview_SetPreviewType(LC_SMALL_ICO)
		Case 1 : MenuPreview_SetPreviewType(HC_SMALL_ICO)
		&apos;these are not available for menu
		&apos;Case 2 : MenuPreview_SetPreviewType(LC_BIG_ICO)
		&apos;Case 3 : MenuPreview_SetPreviewType(HC_BIG_ICO)
	End Select
	EnableStepControls()
	
	oEvent.Source.Model.Enabled = True
	oEvent.Source.setFocus()
	
End Sub


&apos;______________________________________________________________________________
Sub cmdOfficeMenuMoveUp_onClick(oEvent As Object)
Dim I As Integer
	I = MenuPreview_GetSelectedItemPos()
	&apos;move the item in the menu structure
	SwapElements(aCurrentMenu.SubItems(), I-1, I)
	
	&apos;move the item in the preview
	MenuPreview_MoveUp(I)
	MenuPreview_SelectItemPos(I- 1)
End Sub


&apos;______________________________________________________________________________
Sub cmdOfficeMenuMoveDown_onClick(oEvent As Object)
Dim I As Integer

	I = MenuPreview_GetSelectedItemPos()
	&apos;move the item in the menu structure
	SwapElements(aCurrentMenu.SubItems(), I, I+1)
	
	&apos;move the item in the preview
	MenuPreview_MoveDown(I)
	MenuPreview_SelectItemPos(I+1)
End Sub


&apos;______________________________________________________________________________
Sub cmdOfficeMenuAddItem_onClick(oEvent As Object)
Dim aDesc As Object
Dim iDlgResult As Integer
Dim I As Integer

Static iNum As Integer
	
	I = MenuPreview_GetSelectedItemPos()+1

	aDesc = CreateUIElementDescriptor()
	aDesc.DefaultText = GetResString(&quot;Menu item&quot;) &amp; &quot; &quot; &amp; iNum+1
	
	iDlgResult = ShowItemPropertiesDialog(aDesc)
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		
		&apos;insert the item in the menu structure
		aDesc.ParentMenu = aCurrentMenu
		InsertByIndex(aCurrentMenu.SubItems(), I, aDesc)
		
		&apos;add the item in the preview
		MenuPreview_AddItem(I, aDesc)
		
		&apos;the new item will appear selected
		MenuPreview_SelectItemPos(I)
		
		iNum = iNum + 1 &apos;update the local counter
	End If
	
End Sub

&apos;______________________________________________________________________________
Sub cmdOfficeMenuAddGroup_onClick(oEvent As Object)
Dim aDesc As Object
Dim oListBox As Object
Dim iSelected As Integer
Dim iDlgResult As Integer
Dim mItems()
Dim I As Integer

Static iNum As Integer
	
	I = MenuPreview_GetSelectedItemPos()+1
	
	aDesc = CreateUIElementDescriptor()
	aDesc.DefaultText = GetResString(&quot;Menu group&quot;) &amp; &quot; &quot; &amp; iNum+1
	aDesc.IsGroup = True
	
	iDlgResult = ShowItemPropertiesDialog(aDesc)
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
	
		&apos;insert the item in the menu structure
		aDesc.ParentMenu = aCurrentMenu
		InsertByIndex(aCurrentMenu.SubItems(), I, aDesc)
		
		&apos;add the item in the preview
		MenuPreview_AddItem(I, aDesc)
		
		&apos;add the new submenu in the listbox		
		RefreshMenuList
		
		&apos;the new item will appear selected
		MenuPreview_SelectItemPos(I)
		
		iNum = iNum + 1 &apos;update the local counter
	End If

End Sub


&apos;______________________________________________________________________________
Sub cmdOfficeMenuAddSeparator_onClick(oEvent As Object)
Dim aDesc As Object
Dim oListBox As Object
Dim iSelected As Integer
Dim iDlgResult As Integer
Dim mItems()
Dim I As Integer
	
	I = MenuPreview_GetSelectedItemPos()+1
	
	aDesc = CreateUIElementDescriptor()
	aDesc.DefaultText = &quot;--&quot; &amp; GetResString(&quot;separator&quot;) &amp; &quot;--&quot;
	aDesc.IsSeparator = True
	
	iDlgResult = ShowItemPropertiesDialog(aDesc)
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
	
		&apos;insert the item in the menu structure
		aDesc.ParentMenu = aCurrentMenu
		InsertByIndex(aCurrentMenu.SubItems(), I, aDesc)
		
		&apos;add the item in the preview
		MenuPreview_AddItem(I, aDesc)
		
		&apos;add the new submenu in the listbox		
		RefreshMenuList
		
		&apos;the new item will appear selected
		MenuPreview_SelectItemPos(I)

	End If

End Sub

&apos;______________________________________________________________________________
Sub cmdOfficeMenuEdit_onClick(oEvent As Object)
Dim aMenuItem As Object
Dim iDlgResult As Integer
	
	aMenuItem = MenuPreview_GetSelectedItem()
	iDlgResult = ShowItemPropertiesDialog(aMenuItem)
	If iDlgResult = com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
		MenuPreview_UpdateControls()
		If aMenuItem.IsGroup Then
			RefreshMenuList()
		End If
	End if
		
End Sub

&apos;______________________________________________________________________________
Sub cmdOfficeMenuDelete_onClick(oEvent As Object)
Dim aItem As Object
Dim iPos As Integer
	
	&apos;this prevents the routine is called twice if
	&apos;the user click too fast...
	oEvent.Source.Model.Enabled = False
	
	aItem = MenuPreview_GetSelectedItem()
	iPos = MenuPreview_GetSelectedItemPos()
		
	&apos;remove the item in the menu structure
	RemoveByIndex(aCurrentMenu.SubItems(), iPos)
		
	&apos;and remove the item from the preview
	MenuPreview_Remove(iPos)

	&apos;no item selected after a deletion
	MenuPreview_SelectItemPos(-1)
	
	&apos;if is a menu group then update the listbox
	If aItem.IsGroup Then
		RefreshMenuList()
	End If
	
End Sub


&apos;______________________________________________________________________________
&apos; this routine is called from BasicAddonBuilder.MenuPreview_SelectItem
Sub OfficeMenuPreview_SelectionChanged(iPos As Integer)
	EnableStepControls()
End Sub


&apos;______________________________________________________________________________
Sub EnableStepControls()
Dim iSel As Integer
Dim iCount As Integer

	iSel = MenuPreview_GetSelectedItemPos
	iCount = MenuPreview_GetItemCount
	
	With g_oDlgWizardModel
		.lstOfficeMenuPreviewType.Enabled = True
		.cmdOfficeMenuAddItem.Enabled = True
		.cmdOfficeMenuAddSeparator.Enabled = True
		.cmdOfficeMenuMoveUp.Enabled = iSel &gt; 0
		.cmdOfficeMenuMoveDown.Enabled = (iSel &gt;= 0) And (iSel &lt; (iCount-1))
		.cmdOfficeMenuDelete.Enabled = iSel &gt;= 0
		.cmdOfficeMenuEdit.Enabled = iSel &gt;= 0 &apos;And Not(MenuPreview_isSeparator(iSel))
	End With
	
End Sub


&apos;______________________________________________________________________________
Sub OfficeMenuPreview_InitializeMenuStruct(sRootMenuTitle As String)
	aRootOfficeMenu = CreateUIElementDescriptor()
	aRootOfficeMenu.DefaultText = sRootMenuTitle
	aRootOfficeMenu.IsGroup = True
	aCurrentMenu = aRootOfficeMenu
	g_oDlgWizardModel.lstOfficeMenuTitle.StringItemList = Array(sRootMenuTitle)
	g_oDlgWizardModel.lstOfficeMenuTitle.SelectedItems = (Array(0))
End Sub


&apos;______________________________________________________________________________
Sub RefreshPreview()
Dim aItem As Object
Dim iMaxIndex As Integer
Dim I As Integer

	iMaxIndex =  MenuPreview_GetItemCount() - 1

	&apos;remove all items from the preview
	While MenuPreview_HasElements()
		MenuPreview_Remove( MenuPreview_GetItemCount() - 1 )
	Wend
	
	&apos;rebuild all items
	For I = LBound(aCurrentMenu.SubItems()) To UBound(aCurrentMenu.SubItems())
		aItem = aCurrentMenu.SubItems(I)
		MenuPreview_AddItem(I, aItem)
	Next
	
	&apos;select nothing
	MenuPreview_SelectItemPos(-1)
	
End Sub


&apos;______________________________________________________________________________
Sub RefreshMenuList()
Dim mMenuList()
Dim oListBox As Object
Dim iOldSelection As Integer

	oListBox = g_oDlgWizard.getControl(&quot;lstOfficeMenuTitle&quot;)
	
	&apos;remember the current selection
	iOldSelection = oListBox.SelectedItemPos
	
	&apos;get the new menu list
	GetMenuList(aRootOfficeMenu, mMenuList())
	
	&apos;replace all items
	oListBox.Model.StringItemList = mMenuList()
	
	&apos;restore the selection
	If iOldSelection &gt;= 0 Then
		oListBox.selectItemPos(iOldSelection, True)
	End If
	
End Sub


</script:module>