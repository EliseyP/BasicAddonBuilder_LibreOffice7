<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="PkgExporter" script:language="StarBasic">REM  *****  BASIC  *****
&apos;______________________________________________________________________________
&apos;	
&apos;	BasicAddonBuilder - $ Version: 0.6.3 $ 
&apos;	Copyright (C) 2006-2008 Paolo Mantovani
&apos;	
&apos;	A wizard to export basic libraries as Add on&apos;s
&apos;
&apos;	This library is free software; you can redistribute it and/or
&apos;	modify it under the terms of the GNU Lesser General Public
&apos;	License as published by the Free Software Foundation.
&apos;	
&apos;	This library is distributed in the hope that it will be useful,
&apos;	but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
&apos;	Lesser General Public License for more details.
&apos;	
&apos;	Please email me with any bug reports, questions or comments:
&apos;	paolomantovani@openoffice.org
&apos;______________________________________________________________________________
&apos;	
&apos;	Module PkgExporter:
&apos;	Functions to create the UNO package from the selected macro library
&apos;______________________________________________________________________________
&apos;
&apos;
&apos; Declarations:
Option Explicit

Public sPyDirForLib As String 

Public mImagesElements()

Private sTempDirUrl As String
Private sIconDirUrl As String
Private sMetaDirUrl As String
Private sPkgDescDirUrl As String
Private sOfficeUiDirUrl As String
Private sRegistrationDirUrl As String

Private sLibraryName As String

&apos;services used at module level
Private oGraphicProvider As Object
Private oFileAccess As Object
Private oURLTransformer As Object


&apos;______________________________________________________________________________________________
&apos; Modified by Derby Russell to ensure the temp folder name stored in this
&apos; module and used throughout this module, is Windows Long Format
&apos; rather than Windows 8.3 format.
&apos; i.e.: &quot;file:///C:/DOCUME~1/LOCALS~1/Temp/~tmp-125102b/&quot;
&apos; is now: &quot;file:///C:/Documents%20and%20Settings/Derby%20Russell/Local%20Settings/Temp/~tmp-125102b/&quot;
Sub ExportUnoPackage(sPackageUrl As String)
Dim iProviderIndex As Integer
Dim oProvider As Object
Dim sTmpPath As String
Dim sPyDir$ 
Dim nCases%
Dim res As Boolean
	
	sPyDirForLib = &quot;python&quot;
	
	&apos;setup services used at module level
	oGraphicProvider = createUnoService(&quot;com.sun.star.graphic.GraphicProvider&quot;)
	oFileAccess = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oURLTransformer = CreateUnoService(&quot;com.sun.star.util.URLTransformer&quot;)	
	
	&apos; retrieve information
	sLibraryName = g_oDlgWizard.getControl(&quot;lstBasicLibraries&quot;).SelectedItem
	iProviderIndex = g_oDlgWizard.getControl(&quot;lstBasicLibraryContainers&quot;).SelectedItemPos
	oProvider = g_mBasicProviders(iProviderIndex)

    &apos;New code developed by Derby Russell
    &apos;build a temp dir that will be used as a work area
    &apos;The new code added was EnsureFolderNameIsLongType(sTempDirUrl)
    &apos;Also moved &quot;&amp; &quot;/&quot;&quot; to after EnsureFolderNameIsLongType
    &apos;rather than combined with GetTempFile()
    &apos;Previous: sTempDirUrl = GetTempFile() &amp; &quot;/&quot;
	sTempDirUrl = GetTempFile()
	sTempDirUrl = EnsureFolderNameIsLongType(sTempDirUrl)
	sTempDirUrl = sTempDirUrl &amp; &quot;/&quot;
	
	If sLibraryName &lt;&gt; &quot;&quot; Then
		&apos;export the basic library in the temp location
		oProvider.BasicLibraries.exportLibrary(sLibraryName, sTempDirUrl, Null)
		
		&apos;export the dialog library in the temp location
		If Not IsNull(oProvider.DialogLibraries) Then
			oProvider.DialogLibraries.exportLibrary(sLibraryName, sTempDirUrl, Null)
		Else
			ExportDialogLibrary(oProvider.Document, sLibraryName, sTempDirUrl)
		End If 
	End If
	
	&apos; Copy Python Library dir to temp
	If g_sPythonLibrary &lt;&gt; &quot;&quot; Then
		GlobalScope.BasicLibraries.LoadLibrary(&quot;ScriptForge&quot;)
		sPyDir = sTempDirUrl &amp; sPyDirForLib
		oFileAccess.createFolder(sPyDir)
		res = CopyFolder(g_sPythonLibrary, sPyDir)
		If res = False Then 
			MsgBox(&quot;Error copy python lib:&quot; &amp; CHR(13) &amp; g_sPythonLibrary)
			Exit Sub
		End If
		
	End If
	
	&apos;create the various sub directories needed
	sMetaDirUrl = sTempDirUrl &amp; &quot;META-INF&quot;
	sIconDirUrl = sTempDirUrl &amp; &quot;icons&quot;
	sPkgDescDirUrl = sTempDirUrl &amp; &quot;pkg-desc&quot;
	sOfficeUiDirUrl = sTempDirUrl &amp; &quot;Office/UI&quot;
	sRegistrationDirUrl = sTempDirUrl &amp; &quot;registration&quot;
	
	With oFileAccess
		.createFolder(sMetaDirUrl)
		.createFolder(sIconDirUrl)
		.createFolder(sPkgDescDirUrl)
		.createFolder(sOfficeUiDirUrl)
		.createFolder(sRegistrationDirUrl)
	End With
	
	&apos;create the Addons.xcu file
	CreateAddonsXcu()
	
	&apos; the description.xml
	CreateDescriptionXml()
	
	&apos;..and the manifest.xml
	CreateManifestXml()
	
	&apos;finally create the package
	If oFileAccess.exists(sPackageUrl) Then
		oFileAccess.kill(sPackageUrl)
	End If
	ZipFolder(sTempDirUrl, sPackageUrl)
	
	&apos;remove the temp dir after operations
	If oFileAccess.exists(sTempDirUrl) And oFileAccess.isFolder(sTempDirUrl) Then
		oFileAccess.kill(sTempDirUrl)
	End If
	
End Sub


&apos;______________________________________________________________________________________________
Sub ExportUpdateXml(sUrl As String)
Dim sStoreUrl As String
Dim sPkgName As String
Dim sIdentifier As String
Dim sVersion As String
Dim sDownloadUrl As String

Dim mLines()
	
	&apos; obtain values from the dialog
	sIdentifier = g_oDlgWizardModel.txtInfoIdentifier.Text
	sVersion = GetPackageVersion()
	
	&apos;obtain the package filename
	If g_oDlgWizardModel.txtStoreUrl.Enabled And _
		g_oDlgWizardModel.txtStoreUrl.Text &lt;&gt; &quot;&quot; Then
		&apos;extract the name from the local file Url
		sStoreUrl = ConvertToUrl(g_oDlgWizardModel.txtStoreUrl.Text)	
		sPkgName = Tools.Strings.FileNameOutOfPath(sStoreUrl)	
	Else
		&apos;build a suitable for the extension
		sPkgName = GetDefaultPackageName()		
	End If
	
	&apos;build the download url
	sDownloadUrl = FixDirpath(g_oDlgWizardModel.txtDownloadUrl.Text) &amp; sPkgName
	
	&apos; setup the header
	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;&quot;)

	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;description&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; xmlns=&quot;&quot;http://openoffice.org/extensions/update/2006&quot;&quot;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; xmlns:xlink=&quot;&quot;http://www.w3.org/1999/xlink&quot;&quot;&gt;&quot;)
	
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;identifier value=&quot;&quot;&quot; &amp; sIdentifier &amp; &quot;&quot;&quot; /&gt;&quot;)
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;version value=&quot;&quot;&quot; &amp; sVersion &amp; &quot;&quot;&quot; /&gt;&quot;)
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;update-download&gt;&quot;)
	AppendItem(mLines(), Indent(2) &amp; &quot;&lt;src xlink:href=&quot;&quot;&quot; &amp; sDownloadUrl &amp; &quot;&quot;&quot; /&gt;&quot;)
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;/update-download&gt;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;/description&gt;&quot;)
	
	&apos;finally create the file
	If oFileAccess.exists(sUrl) And Not oFileAccess.IsFolder(sUrl) Then
		oFileAccess.kill(sUrl)
	End If
	
	Tools.UCB.SaveDataToFile(sUrl, mLines())
	
End Sub

Function GetImgDescFromUiElement(oElement As Object, bFull As Boolean) As Object
	&apos; bFull - get urls for small and big sizes.
	Dim aImgDesc As Object

	aImgDesc = CreateUIImageElementDescriptor()
	aImgDesc.MacroDescriptor = oElement.MacroDescriptor
	aImgDesc.LC16IconUrl = oElement.LC16IconUrl
	aImgDesc.HC16IconUrl = oElement.HC16IconUrl
	If bFull = True Then
		aImgDesc.LC26IconUrl = oElement.LC26IconUrl
		aImgDesc.HC26IconUrl = oElement.HC26IconUrl
	End If
	
	GetImgDescFromUiElement = aImgDesc

End Function

Function IfMacroDescriptorsEqual(oMD As Object, vMD As Object) As Boolean 
	Dim bIsEqual As Boolean
	bIsEqual = False
	If oMD.Provider = vMD.Provider _
	  And oMD.Library = vMD.Library _
	  And oMD.Macro = vMD.Macro _
	Then bIsEqual = True
	
	IfMacroDescriptorsEqual = bIsEqual
	
End Function


Sub GetImgDescriptorsFromUIContainers()
&apos;Dim resImgItems()
		
	Dim aDesc As Object
	Dim vDesc As Object
	Dim aImgDesc As Object
	Dim vImgDesc As Object
	Dim I%
	
	&apos; Get all ImgDesc from mToolbarUIElements()
	If UBound(mToolbarUIElements()) &gt;= 0 Then
		For Each aDesc In mToolbarUIElements()
			aImgDesc = GetImgDescFromUiElement(aDesc, True)
			AppendItem(mImagesElements(), aImgDesc)
					
		Next aDesc	
	End If
	
	If UBound(aRootOfficeMenu.SubItems()) &gt;= 0 Then
		
		For Each aDesc In aRootOfficeMenu.SubItems()
			&apos; Compare for mImagesElements()
			aImgDesc = GetImgDescFromUiElement(aDesc, False)
			I = 0
			If UBound(mImagesElements()) &lt; 0 Then
				AppendItem(mImagesElements(), aImgDesc)
			Else
				For Each vImgDesc In mImagesElements()
					If IfMacroDescriptorsEqual(aImgDesc.MacroDescriptor, vImgDesc.MacroDescriptor) = True Then
						If aImgDesc.LC16IconUrl = &quot;&quot; And vImgDesc.LC16IconUrl &lt;&gt; &quot;&quot; Then aImgDesc.LC16IconUrl = vImgDesc.LC16IconUrl
						If aImgDesc.HC16IconUrl = &quot;&quot; And vImgDesc.HC16IconUrl &lt;&gt; &quot;&quot; Then aImgDesc.HC16IconUrl = vImgDesc.HC16IconUrl
						If aImgDesc.LC26IconUrl = &quot;&quot; And vImgDesc.LC26IconUrl &lt;&gt; &quot;&quot; Then aImgDesc.LC26IconUrl = vImgDesc.LC26IconUrl
						If aImgDesc.HC26IconUrl = &quot;&quot; And vImgDesc.HC26IconUrl &lt;&gt; &quot;&quot; Then aImgDesc.HC26IconUrl = vImgDesc.HC26IconUrl
						&apos; Imply changes to mToolbarUIElements()
						mImagesElements(I) = aImgDesc
					Else
						AppendItem(mImagesElements(), aImgDesc)
					End If	
					I = I + 1 		
				Next vImgDesc
			End If		    
		Next aDesc	
	End If
	
	If UBound(aRootAddonMenu.SubItems()) &gt;= 0 Then
		For Each aDesc In aRootAddonMenu.SubItems()
			&apos; Compare for mImagesElements()
			aImgDesc = GetImgDescFromUiElement(aDesc, False)
			I = 0
			If UBound(mImagesElements()) &lt; 0 Then
				AppendItem(mImagesElements(), aImgDesc)
			Else
				For Each vImgDesc In mImagesElements()
					If IfMacroDescriptorsEqual(aImgDesc.MacroDescriptor, vImgDesc.MacroDescriptor) = True Then
						If aImgDesc.LC16IconUrl = &quot;&quot; And vImgDesc.LC16IconUrl &lt;&gt; &quot;&quot; Then aImgDesc.LC16IconUrl = vImgDesc.LC16IconUrl
						If aImgDesc.HC16IconUrl = &quot;&quot; And vImgDesc.HC16IconUrl &lt;&gt; &quot;&quot; Then aImgDesc.HC16IconUrl = vImgDesc.HC16IconUrl
						If aImgDesc.LC26IconUrl = &quot;&quot; And vImgDesc.LC26IconUrl &lt;&gt; &quot;&quot; Then aImgDesc.LC26IconUrl = vImgDesc.LC26IconUrl
						If aImgDesc.HC26IconUrl = &quot;&quot; And vImgDesc.HC26IconUrl &lt;&gt; &quot;&quot; Then aImgDesc.HC26IconUrl = vImgDesc.HC26IconUrl
						&apos; Imply changes to mToolbarUIElements()
						mImagesElements(I) = aImgDesc
					Else
						AppendItem(mImagesElements(), aImgDesc)
					End If
					I = I + 1 		
				Next vImgDesc
			End If			
		Next aDesc	
	End If
	
End Sub


&apos;______________________________________________________________________________
Sub CreateAddonsXcu()
Dim sPackageID As String
Dim sToolbarID As String
Dim sToolbarName As String
Dim aUIElem As Object
Dim aImgElem As Object
Dim sNodeName As String
Dim I As Integer
Dim nIndex As Integer


Dim mLines()
	&apos; Get Images from Toolbar and Menus
	GetImgDescriptorsFromUIContainers()

	&apos;retrieve information from the dialog controls
	If g_bOnlyPython = True Then
		sPackageID = g_sExtensionWithOnlyPythonName
	Else
		sPackageID = EscapeChars(g_oDlgWizard.getControl(&quot;lstBasicLibraries&quot;).SelectedItem)
	End If
	
	&apos; setup the header
	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;oor:component-data &quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; xmlns:oor=&quot;&quot;http://openoffice.org/2001/registry&quot;&quot;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; xmlns:xs=&quot;&quot;http://www.w3.org/2001/XMLSchema&quot;&quot;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; oor:name=&quot;&quot;Addons&quot;&quot;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; oor:package=&quot;&quot;org.openoffice.Office&quot;&quot;&gt;&quot;)
	
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;node oor:name=&quot;&quot;AddonUI&quot;&quot;&gt;&quot;)

	&apos; add the OfficeToolBar definition
	If g_oDlgWizardModel.chkToolbar.State = 1 Then
		If UBound(mToolbarUIElements()) &gt;= 0 Then
			AppendItem(mLines(), Indent(2) &amp; &quot;&lt;node oor:name=&quot;&quot;OfficeToolBar&quot;&quot;&gt;&quot;)
			
			sToolbarID = sPackageID &amp; &quot;.OfficeToolBar&quot;
			sToolbarName = EscapeChars(g_oDlgWizard.getControl(&quot;txtToolbarTitle&quot;).Text)
			CreateModuleWindowStateXcu(sToolbarID, sToolbarName)
			
			AppendItem(mLines(), Indent(3) &amp; &quot;&lt;node oor:name=&quot;&quot;&quot; &amp; sToolbarID &amp; &quot;&quot;&quot; oor:op=&quot;&quot;replace&quot;&quot;&gt;&quot;) 
		
			I = 0
			For Each aUIElem In mToolbarUIElements()
				I = I + 1
				sNodeName = &quot;m&quot; &amp; PadLeft(I, &quot;0&quot;, 3)
				AppendUIElementXml(mLines(), aUIElem, sNodeName, 5)
			Next
			
			AppendItem(mLines(), Indent(3) &amp; &quot;&lt;/node&gt;&quot;)
			AppendItem(mLines(), Indent(2) &amp; &quot;&lt;/node&gt;&quot;)
		End If
	End If
	
	&apos; add the OfficeMenuBar definition
	If g_oDlgWizardModel.chkOfficeMenu.State = 1 Then
		If UBound(aRootOfficeMenu.SubItems()) &gt;= 0 Then
			AppendItem(mLines(), Indent(2) &amp; &quot;&lt;node oor:name=&quot;&quot;OfficeMenuBar&quot;&quot;&gt;&quot;)
			sNodeName = sPackageID &amp; &quot;.OfficeMenuBar&quot;
			AppendUIElementXml(mLines(), aRootOfficeMenu, sNodeName, 3)
			AppendItem(mLines(), Indent(2) &amp; &quot;&lt;/node&gt;&quot;)
		End If
	End If
	
	&apos; add the AddonMenu definition
	If g_oDlgWizardModel.chkAddonMenu.State = 1 Then
		If UBound(aRootAddonMenu.SubItems()) &gt;= 0 Then
			AppendItem(mLines(), Indent(2) &amp; &quot;&lt;node oor:name=&quot;&quot;AddonMenu&quot;&quot;&gt;&quot;)
			I = 0
			For Each aUIElem In aRootAddonMenu.SubItems()
				I = I + 1
				sNodeName = sPackageID &amp; &quot;.AddonMenu.m&quot; &amp; PadLeft(I, &quot;0&quot;, 3)
				AppendUIElementXml(mLines(), aUIElem, sNodeName, 4)
			Next
			AppendItem(mLines(), Indent(2) &amp; &quot;&lt;/node&gt;&quot;)
		End If
	End If	
	
	
	&apos;Add Images elements
	If UBound(mImagesElements()) &gt;= 0 Then
		AppendItem(mLines(), Indent(2) &amp; &quot;&lt;node oor:name=&quot;&quot;Images&quot;&quot;&gt;&quot;)

		I = 0
		For Each aImgElem In mImagesElements()
			I = I + 1
			sNodeName = sPackageID &amp; &quot;.Images.m&quot; &amp; PadLeft(I, &quot;0&quot;, 3)
			AppendUIImageElementXml(mLines(), aImgElem, sNodeName, 4)
		Next
		
		AppendItem(mLines(), Indent(2) &amp; &quot;&lt;/node&gt;&quot;)
	End If

	
	&apos; add the HelpMenu definition
	If g_oDlgWizardModel.chkHelpMenu.State = 1 Then
		If UBound(aRootHelpMenu.SubItems()) &gt;= 0 Then
			AppendItem(mLines(), Indent(2) &amp; &quot;&lt;node oor:name=&quot;&quot;OfficeHelp&quot;&quot;&gt;&quot;)
			I = 0
			For Each aUIElem In aRootHelpMenu.SubItems()
				I = I + 1
				sNodeName = sPackageID &amp; &quot;.OfficeHelp.m&quot; &amp; PadLeft(I, &quot;0&quot;, 3)
				AppendUIElementXml(mLines(), aUIElem, sNodeName, 4)
			Next
			AppendItem(mLines(), Indent(2) &amp; &quot;&lt;/node&gt;&quot;)
		End if
	End If
	
	&apos;close addon xcu
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;/node&gt;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;/oor:component-data&gt;&quot;)
	
	Tools.UCB.SaveDataToFile(sTempDirUrl &amp; &quot;Addons.xcu&quot;, mLines())
	
End Sub

Sub AppendUIImageElementXml(mLines(), aUIImagesDescriptor As Object, sElementName As String, iBaseIndent As Integer)
Dim sURL As String
Dim sImgId As String
Dim I As Integer
	
  AppendItem(mLines(), Indent(iBaseIndent) &amp; &quot;&lt;node oor:name=&quot;&quot;&quot; &amp; sElementName &amp; &quot;&quot;&quot; oor:op=&quot;&quot;replace&quot;&quot;&gt;&quot;)

	&apos;----------------------------------------------------
	&apos; Add URL property
	sURL = GetScriptURIFromDescriptor(aUIImagesDescriptor.MacroDescriptor)
	sUrl = EscapeChars(sUrl)
	AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;prop oor:name=&quot;&quot;URL&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
	  AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;value&gt;&quot; &amp; sURL &amp; &quot;&lt;/value&gt;&quot;)
	AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/prop&gt;&quot;)
	&apos;----------------------------------------------------	
	
	&apos;----------------------------------------------------
	&apos;Add node for UserDefinedImages
	AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;node oor:name=&quot;&quot;UserDefinedImages&quot;&quot;&gt;&quot;)
	
	&apos;Add each images as prop 
	
	sImgId = GetImageId(aUIImagesDescriptor)
	
	If sImgId &lt;&gt; &quot;&quot; Then
		&apos;BigUrl
		If aUIImagesDescriptor.LC26IconUrl &lt;&gt; &quot;&quot; Then
			sURL = sImgId &amp; &quot;_26.bmp&quot;
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;prop oor:name=&quot;&quot;ImageBigURL&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
			  AppendItem(mLines(), Indent(iBaseIndent+3) &amp; &quot;&lt;value&gt;%origin%/icons/&quot; &amp; sURL &amp; &quot;&lt;/value&gt;&quot;)
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;/prop&gt;&quot;)
		End If
		&apos;SmallUrl
		If aUIImagesDescriptor.LC16IconUrl &lt;&gt; &quot;&quot; Then
			sURL = sImgId &amp; &quot;_16.bmp&quot;
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;prop oor:name=&quot;&quot;ImageSmallURL&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
			  AppendItem(mLines(), Indent(iBaseIndent+3) &amp; &quot;&lt;value&gt;%origin%/icons/&quot; &amp; sURL &amp; &quot;&lt;/value&gt;&quot;)
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;/prop&gt;&quot;)
		End If 	
		&apos;BigUrlHC
		If aUIImagesDescriptor.HC26IconUrl &lt;&gt; &quot;&quot; Then
			sURL = sImgId &amp; &quot;_26h.bmp&quot;
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;prop oor:name=&quot;&quot;ImageBigHCURL&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
			  AppendItem(mLines(), Indent(iBaseIndent+3) &amp; &quot;&lt;value&gt;%origin%/icons/&quot; &amp; sURL &amp; &quot;&lt;/value&gt;&quot;)
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;/prop&gt;&quot;)
		End If
		&apos;SmallUrlHC
		If aUIImagesDescriptor.HC16IconUrl &lt;&gt; &quot;&quot; Then
			sURL = sImgId &amp; &quot;_16h.bmp&quot;
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;prop oor:name=&quot;&quot;ImageSmallHCURL&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
			  AppendItem(mLines(), Indent(iBaseIndent+3) &amp; &quot;&lt;value&gt;%origin%/icons/&quot; &amp; sURL &amp; &quot;&lt;/value&gt;&quot;)
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;/prop&gt;&quot;)
		End If 	
		
	End If
		  
	AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/node&gt;&quot;)	&apos; END UserDefinedImages
	&apos;----------------------------------------------------

  AppendItem(mLines(), Indent(iBaseIndent) &amp; &quot;&lt;/node&gt;&quot;) &apos; END sElementName
End Sub



&apos;______________________________________________________________________________
Sub AppendUIElementXml(mLines(), aUIElementDescriptor As Object, sElementName As String, iBaseIndent As Integer)
Dim sURL As String
Dim sImgId As String
Dim I As Integer
Dim aSubItem As Object
Dim aStrPair As Object

	AppendItem(mLines(), Indent(iBaseIndent) &amp; &quot;&lt;node oor:name=&quot;&quot;&quot; &amp; sElementName &amp; &quot;&quot;&quot; oor:op=&quot;&quot;replace&quot;&quot;&gt;&quot;)
	
	AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;prop oor:name=&quot;&quot;Context&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
	AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;value&gt;&quot; &amp; aUIElementDescriptor.OfficeContext &amp; &quot;&lt;/value&gt;&quot;)
	AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/prop&gt;&quot;)
	
	If aUIElementDescriptor.IsSeparator Then
		sURL = &quot;private:separator&quot;
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;prop oor:name=&quot;&quot;URL&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;value&gt;&quot; &amp; sURL &amp; &quot;&lt;/value&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/prop&gt;&quot;)

	ElseIf aUIElementDescriptor.IsGroup Then
		
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;prop oor:name=&quot;&quot;Title&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;value&gt;&quot; &amp; EscapeChars(aUIElementDescriptor.DefaultText) &amp; &quot;&lt;/value&gt;&quot;)

		For Each aStrPair In aUIElementDescriptor.TextTranslations()
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; _
				&quot;&lt;value xml:lang=&quot;&quot;&quot; &amp; aStrPair.First &amp; &quot;&quot;&quot;&gt;&quot; &amp; _
				EscapeChars(aStrPair.Second) &amp; _
				&quot;&lt;/value&gt;&quot;)
		Next

		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/prop&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;node oor:name=&quot;&quot;Submenu&quot;&quot;&gt;&quot;)
		
		&apos;add sub menu recursively
		I = 0
		For Each aSubItem In aUIElementDescriptor.SubItems
			I = I + 1
			&apos;AppendUIElementXml(mLines(), aSubItem, &quot;m&quot; &amp; PadLeft(I, &quot;0&quot;, 3), iBaseIndent + 1)
			AppendUIElementXml(mLines(), aSubItem, &quot;m&quot; &amp; PadLeft(I, &quot;0&quot;, 3), iBaseIndent + 2)
		Next
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/node&gt;&quot;)
	
	Else
		sURL = GetScriptURIFromDescriptor(aUIElementDescriptor.MacroDescriptor)
		sUrl = EscapeChars(sUrl)
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;prop oor:name=&quot;&quot;URL&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;value&gt;&quot; &amp; sURL &amp; &quot;&lt;/value&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/prop&gt;&quot;)
		
	
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;prop oor:name=&quot;&quot;Title&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;value&gt;&quot; &amp; EscapeChars(aUIElementDescriptor.DefaultText) &amp; &quot;&lt;/value&gt;&quot;)

		For Each aStrPair In aUIElementDescriptor.TextTranslations()
			AppendItem(mLines(), Indent(iBaseIndent+2) &amp; _
				&quot;&lt;value xml:lang=&quot;&quot;&quot; &amp; aStrPair.First &amp; &quot;&quot;&quot;&gt;&quot; &amp; _
				EscapeChars(aStrPair.Second) &amp; _
				&quot;&lt;/value&gt;&quot;)
		Next
		
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/prop&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;prop oor:name=&quot;&quot;Target&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+2) &amp; &quot;&lt;value&gt;_self&lt;/value&gt;&quot;)
		AppendItem(mLines(), Indent(iBaseIndent+1) &amp; &quot;&lt;/prop&gt;&quot;)
	End If
	
	AppendItem(mLines(), Indent(iBaseIndent) &amp; &quot;&lt;/node&gt;&quot;)
	
End Sub


&apos;______________________________________________________________________________
Sub CreateDescriptionXml()
Dim sIdentifier As String
Dim sVersion As String
Dim sLicenseUrl As String
Dim sLang As String
Dim sUpdateUrl As String
Dim mLines()
Dim aUrl As New com.sun.star.util.URL
Dim aStrPair As Object

Dim s_publisherUrl As String
Dim s_publisherName As String

	&apos;obtain values from the wizard dialog:
	
	&apos;the extension identifier
	sIdentifier = g_oDlgWizardModel.txtInfoIdentifier.Text

	&apos;the extension version
	sVersion = GetPackageVersion()
	
	&apos;the default license
	sLicenseUrl = ConvertToUrl(g_oDlgWizardModel.txtInfoLicenseUrl.Text)
	
	&apos;check the update.xml download (http) url
	If g_oDlgWizardModel.txtDownloadUrl.Enabled Then
		aUrl.Complete = g_oDlgWizardModel.txtDownloadUrl.Text
		oUrlTransformer.parseStrict(aUrl)
		If aUrl.Protocol = &quot;&quot; Then
			aUrl.Protocol = &quot;http:&quot;
		End If
		
		&apos;rebuild the update.xml download (http) url
		&apos;the dot before the filename is for making it hidden
		oUrlTransformer.assemble(aUrl)
		sUpdateUrl = FixDirPath(aUrl.Complete) &amp; &quot;.&quot; &amp; sIdentifier &amp; &quot;_update.xml&quot;
	End If

	&apos; setup the header
	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos;?&gt;&quot;)

	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;description&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; xmlns=&quot;&quot;http://openoffice.org/extensions/description/2006&quot;&quot;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; xmlns:dep=&quot;&quot;http://openoffice.org/extensions/description/2006&quot;&quot;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; xmlns:l=&quot;&quot;http://libreoffice.org/extensions/description/2011&quot;&quot;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot; xmlns:xlink=&quot;&quot;http://www.w3.org/1999/xlink&quot;&quot;&gt;&quot;)
	
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;identifier value=&quot;&quot;&quot; &amp; sIdentifier &amp; &quot;&quot;&quot;/&gt;&quot;)
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;version value=&quot;&quot;&quot; &amp; sVersion &amp; &quot;&quot;&quot;/&gt;&quot;)
	
	&apos;OpenOffice.org-minimal-version:
	&apos;not currently supported by BasicAddonBuilder
	&apos; (adding as XML comment)
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;dependencies&gt;&quot;)
	&apos;AppendItem(mLines(), Indent(2) &amp; &quot;&lt;OpenOffice.org-minimal-version value=&quot;&quot;2.1&quot;&quot; dep:name=&quot;&quot;OpenOffice.org 2.1&quot;&quot;/&gt;&quot;)
	AppendItem(mLines(), Indent(2) &amp; &quot;&lt;l:LibreOffice-minimal-version value=&quot;&quot;7.1&quot;&quot; dep:name=&quot;&quot;LibreOffice 7.1 minimum, or more recent&quot;&quot;/&gt;&quot;)
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;/dependencies&gt;&quot;)
	
	&apos;--&gt;patch-----for more information, see module &quot;patch_information&quot;----
	s_publisherUrl = g_oDlgWizardModel.txt_publisherUrl.Text
	s_publisherName = g_oDlgWizardModel.txt_publisherName.Text
	
	If g_oDlgWizardModel.chk_publisher.State = 1 Then
		AppendItem(mLines(), Indent(1) &amp; &quot;&lt;publisher&gt;&quot;)
		AppendItem(mLines(), Indent(2) &amp; &quot;&lt;name lang=&quot;&quot;de&quot;&quot; xlink:href=&quot;&quot;&quot; &amp; s_publisherUrl &amp; &quot;&quot;&quot;&gt;&quot; &amp; s_publisherName &amp; &quot;&lt;/name&gt;&quot;)
		AppendItem(mLines(), Indent(1) &amp; &quot;&lt;/publisher&gt;&quot;)
	End If
	&apos;-------------------------------------------------------------patch&lt;--
	

	If g_oDlgWizardModel.txtDownloadUrl.Enabled Then
		AppendItem(mLines(), Indent(1) &amp; &quot;&lt;update-information&gt;&quot;)
		AppendItem(mLines(), Indent(2) &amp; &quot;&lt;src xlink:href=&quot;&quot;&quot; &amp; sUpdateUrl &amp; &quot;&quot;&quot; /&gt;&quot;)
		AppendItem(mLines(), Indent(1) &amp; &quot;&lt;/update-information&gt;&quot;)
	End If
	
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;registration&gt;&quot;)
	If sLicenseUrl &lt;&gt; &quot;&quot; Then
		AppendItem(mLines(), Indent(2) &amp; _
			&quot;&lt;simple-license  accept-by=&quot;&quot;admin&quot;&quot; default-license-id=&quot;&quot;ID0&quot;&quot; suppress-on-update=&quot;&quot;true&quot;&quot; &gt;&quot;)

		&apos;setup the default license
		aUrl.Complete = sLicenseUrl
		oURlTransformer.parseStrict(aUrl)
		
		&apos;copy the license file inside the package		
		oFileAccess.copy(aUrl.Complete, sRegistrationDirUrl &amp; &quot;/&quot; &amp;  aUrl.Name)	
		AppendItem(mLines(), Indent(3) &amp; _
			&quot;&lt;license-text xlink:href=&quot;&quot;&quot; &amp; &quot;registration/&quot; &amp;  aUrl.Name &amp; &quot;&quot;&quot; lang=&quot;&quot;en&quot;&quot; license-id=&quot;&quot;ID0&quot;&quot; /&gt;&quot;)
		
		&apos;add localized versions of the licese
		For Each aStrPair In g_mLicenseTranslations()
			sLang = aStrPair.First
			aUrl.Complete = aStrPair.Second
			oURlTransformer.parseStrict(aUrl)
			&apos;copy the license file inside the package		
			oFileAccess.copy(aUrl.Complete, sRegistrationDirUrl &amp; &quot;/&quot; &amp;  aUrl.Name)
			
			AppendItem(mLines(), Indent(3) &amp; _
			&quot;&lt;license-text xlink:href=&quot;&quot;&quot; &amp; &quot;registration/&quot; &amp;  aUrl.Name &amp; &quot;&quot;&quot; lang=&quot;&quot;&quot; &amp; sLang &amp;  &quot;&quot;&quot; /&gt;&quot;)
		Next aStrPair
		AppendItem(mLines(), Indent(2) &amp; &quot;&lt;/simple-license&gt;&quot;)
		
	End If
	AppendItem(mLines(), Indent(1) &amp; &quot;&lt;/registration&gt;&quot;)
	AppendItem(mLines(), Indent(0) &amp; &quot;&lt;/description&gt;&quot;)
	
	Tools.UCB.SaveDataToFile(sTempDirUrl &amp; &quot;description.xml&quot;, mLines())
	
End Sub


&apos;______________________________________________________________________________
Sub CreateManifestXml()

Dim oFileStream As Object
Dim oWriter As Object
Dim aStrPair As Object

Dim sFileUrl As String
Dim sLang As String
Dim sPkgDesc As String

Dim mFilesToAdd()
Dim mManifestEntries()
Dim mEntry()

	If g_sPythonLibrary &lt;&gt; &quot;&quot; Then
		mEntry() = GetManifestEntry(sPyDirForLib &amp; &quot;/&quot;, &quot;framework-script&quot;)
	End If
	If sLibraryName &lt;&gt; &quot;&quot; Then
 	    &apos;sLibraryName is a private variable of this module (PkgExporter.xba)
		mEntry() = GetManifestEntry(sLibraryName &amp; &quot;/&quot;, &quot;basic-library&quot;)
	End If
	
	AppendItem(mManifestEntries, mEntry())
	
	&apos;add the default package description if present
	sPkgDesc = g_oDlgWizard.getControl(&quot;txtPackageDescription&quot;).Text
	If sPkgDesc &lt;&gt; &quot;&quot; Then
		Tools.UCB.SaveDataToFile(sPkgDescDirUrl &amp; &quot;/pkg-description.txt&quot;, Array(sPkgDesc))
		mEntry() = GetManifestEntry(&quot;pkg-desc/pkg-description.txt&quot;, &quot;package-bundle-description&quot;)
		AppendItem(mManifestEntries, mEntry())
		
		&apos;add localized versions of the package description if present
		For Each aStrPair In g_mPkgDescTranslations()
			sLang = aStrPair.First
			&apos;currently the locale ID is not correctly managed so we need a workaround
			Dim mParts()
			If sLang &lt;&gt; &quot;&quot; Then
				mParts() = Split(sLang, &quot;-&quot;)
				sLang = mParts(0)
			End If
						
			sPkgDesc = aStrPair.Second
			If sPkgDesc &lt;&gt; &quot;&quot; Then
				Tools.UCB.SaveDataToFile(sPkgDescDirUrl &amp; &quot;/pkg-description.&quot; &amp; sLang, Array(sPkgDesc))
				mEntry() = GetManifestEntry( _
					&quot;pkg-desc/pkg-description.&quot; &amp; sLang, _
					&quot;package-bundle-description;locale=&quot; &amp; sLang)
					
				AppendItem(mManifestEntries, mEntry())
			End If
		Next aStrPair
		
	End If
	
	&apos;search for xcs files (registry schema) and add them
	mFilesToAdd() = FindFiles(sTempDirUrl, &quot;.xcs&quot;)
	For Each sFileUrl In mFilesToAdd()
		&apos;cut the path
		sFileUrl = Right(sFileUrl, Len(sFileUrl) - Len(sTempDirUrl))
		&apos;add the entry
		mEntry() = GetManifestEntry(sFileUrl, &quot;configuration-schema&quot;)
		AppendItem(mManifestEntries, mEntry())
	Next

	&apos;search for xcu files (registry update) and add them
	mFilesToAdd() = FindFiles(sTempDirUrl, &quot;.xcu&quot;)
	For Each sFileUrl In mFilesToAdd()
		&apos;cut the path
		sFileUrl = Right(sFileUrl, Len(sFileUrl) - Len(sTempDirUrl))
		&apos;add the entry
		mEntry() = GetManifestEntry(sFileUrl, &quot;configuration-data&quot;)
		AppendItem(mManifestEntries, mEntry())
	Next

	&apos;store the manifest
	oFileStream = oFileAccess.openFileWrite(sMetaDirUrl &amp; &quot;/manifest.xml&quot;)
	oWriter = CreateUnoService(&quot;com.sun.star.packages.manifest.ManifestWriter&quot;)
	oWriter.writeManifestSequence(oFileStream, mManifestEntries())
	
End Sub


&apos;______________________________________________________________________________
Function FindFiles(sStartDirUrl As String, sFileName As String) As Variant
Dim oFileAccess As Object
Dim bWithDirs As Boolean
Dim mFolderContents() As String
Dim sUrl As String
Dim mFileList()
Dim sTmpResult As String
Dim mTmpFileList()

	oFileAccess = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)

	bWithDirs = True
	
	&apos;Returns the contents of a folder.
	mFolderContents() = oFileAccess.getFolderContents(sStartDirUrl, bWithDirs)
	
	For Each sUrl In mFolderContents()
		If oFileAccess.isFolder(sUrl) Then
			mTmpFileList() = FindFiles(sUrl, sFileName)
			For Each sTmpResult In mTmpFileList()
				AppendItem(mFileList(), sTmpResult)
			Next
		Else
			If Right(sUrl, Len(sFileName)) = sFileName Then
				AppendItem(mFileList(), sUrl)
			End If
		End If
	Next
	
	FindFiles = mFileList()
	
End Function

&apos;______________________________________________________________________________
&apos;New function developed by Derby Russell
&apos;Required because InStrRev does not exist in Open Office 4.1
Function pmxInStrRev(sStringToSearch As String, sStringToFind As String) As Integer
Dim nIndexFound As Integer
Dim nIndex As Integer
Dim nLenBuffer As Integer
Dim nLenBufferFind As Integer
Dim sTemp As String

    nLenBuffer = Len(sStringToSearch)
    nLenBufferFind = Len(sStringToFind)

    nIndex = nLenBuffer - nLenBufferFind - 1
    nIndexFound = 0
    Do
        sTemp = Mid(sStringToSearch, nIndex, nLenBufferFind)
        If sTemp = sStringToFind Then
            If nIndex &lt; nLenBuffer Then
                nIndexFound = nIndex
                Exit Do
            End If
        End If
        
        If nIndex &gt; 0 Then
            nIndex = nIndex - 1
        Else
            Exit Do
        End If
    Loop
    &apos;Now nIndexFound is the last nIndexFound
    
    pmxInStrRev = nIndexFound

End Function

&apos;______________________________________________________________________________
&apos;New function developed by Derby Russell
&apos;Split a folder name into name and path and return Path
&apos; note: ByRef to force a parameter to be passed by reference. OpenOffice.org
&apos; Basic recognizes but ignores this keyword, because this is already the default
&apos; procedure in OpenOffice.org Basic this applies to the argument: Sep
Function SplitFolderPath(sStartDirUrl As String, Sep) As String
Dim sTempUrl As String

    Sep = pmxInStrRev(sStartDirUrl, &quot;/&quot;) - 1
    sTempUrl = Left(sStartDirUrl, Sep)

    SplitFolderPath = sTempUrl

End Function

&apos;______________________________________________________________________________
&apos;New function developed by Derby Russell
&apos;Split a folder name into name and path and return Name
Function SplitFolderName(sStartDirUrl As String, Sep As Integer) As String
Dim sTempName As String
Dim nLenBuffer As Integer

    nLenBuffer = Len(sStartDirUrl)
    Sep = nLenBuffer - Sep - 1
    sTempName = Right(sStartDirUrl, Sep)

    SplitFolderName = sTempName

End Function

&apos;______________________________________________________________________________
&apos;New function developed by Derby Russell
&apos;Split a folder name into name and path and return Name
&apos;
&apos; note: ByRef to force a parameter to be passed by reference. OpenOffice.org
&apos; Basic recognizes but ignores this keyword, because this is already the default
&apos; procedure in OpenOffice.org Basic this applies to the argument: sPath
&apos;
&apos; sPath is by reference
&apos; the folder name is returned
Function SplitFolderNamePath(sStartDirUrl As String, sPath) As String
Dim sTempName As String
Dim nLenBuffer As Integer
Dim Sep As Integer

    &apos; note: ByRef to force a parameter to be passed by reference. OpenOffice.org
    &apos; Basic recognizes but ignores this keyword, because this is already the default
    &apos; procedure in OpenOffice.org Basic this applies to the argument: Sep
    sPath = SplitFolderPath(sStartDirUrl, Sep)
    
    sTempName = SplitFolderName(sStartDirUrl, Sep)

    SplitFolderNamePath = sTempName
    
End Function

&apos;______________________________________________________________________________
&apos;New function developed by Derby Russell
&apos;This function will accept a folder url and make sure it is
&apos;in the long format and NOT the dos 8.3 format!
&apos; i.e.: &quot;file:///C:/DOCUME~1/LOCALS~1/Temp/~tmp-125102b&quot;
&apos; is now: &quot;file:///C:/Documents%20and%20Settings/Derby%20Russell/Local%20Settings/Temp/~tmp-125102b&quot;
Function EnsureFolderNameIsLongType(sStartDirUrl As String) As String
Dim oFileAccess As Object
Dim bWithDirs As Boolean
Dim mFolderContents() As String
Dim sUrl As String
Dim sReturnResult As String
Dim Sep As Integer
Dim sTempName As String
Dim sTempUrl As String
Dim sTempFolder As String
Dim sTDirName As String
Dim sTDirUrl As String
Dim nLenBuffer As Integer

    oFileAccess = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)

    &apos;Split the Folder pathname into Name and Path
    sTempName = SplitFolderNamePath(sStartDirUrl, sTempUrl)
    
    &apos;Create a folder in the directory so there is something in there if it is empty
    sTempFolder = sTempUrl &amp; &quot;/tmpDeleteMe&quot;
    oFileAccess.createFolder(sTempFolder)

    sReturnResult = sStartDirUrl
    
    bWithDirs = True
    
    &apos;Returns the contents of a folder.
    mFolderContents() = oFileAccess.getFolderContents(sTempUrl, bWithDirs)
    For Each sUrl In mFolderContents()
        &apos;Fails if directory is empty!
        &apos;Get just the path from the first folder or file found in this directory
        sTDirUrl = SplitFolderPath(sUrl, Sep)
        
        &apos;Concatenate the seperator and the original folder name back onto the path.
        sReturnResult = sTDirUrl &amp; &quot;/&quot; &amp; sTempName
        Exit For
    Next
    
    &apos;Remove the unneeded directory
    oFileAccess.kill(sTempFolder)
    
    EnsureFolderNameIsLongType = sReturnResult
    
End Function

&apos;______________________________________________________________________________
&apos;Items to correct may be here where sFullPath is defined wrong for Addons.xcu
Function GetManifestEntry(sFullPath As String, sMediaType As String) As Variant
Dim sPrefix As String

	&apos;fix media type prefix
	sPrefix = &quot;application/vnd.sun.star.&quot;
	If Left(sMediaType, Len(sPrefix)) &lt;&gt; sPrefix Then
		sMediaType = sPrefix &amp; sMediaType
	End If

    &apos;Remember this mEntry(1) is an array of 2: 0 and 1
	Dim mEntry(1) As New com.sun.star.beans.PropertyValue
	mEntry(0).Name = &quot;FullPath&quot;
	mEntry(0).Value = sFullPath
	mEntry(1).Name = &quot;MediaType&quot;
	mEntry(1).Value = sMediaType
	
	GetManifestEntry = mEntry()
	
End Function

&apos;______________________________________________________________________________________________
&apos;these files is needed in order to manage the toolbar title
Sub CreateModuleWindowStateXcu(sToolbarID As String, sToolbarName As String)
Dim mLines()
Dim mModules(7) As String
Dim sModName As String
Dim aStrPair As Object

	mModules(0) = &quot;Base&quot;
	mModules(1) = &quot;BasicIDE&quot;
	mModules(2) = &quot;Calc&quot;
	mModules(3) = &quot;Draw&quot;
	mModules(4) = &quot;Impress&quot;
	mModules(5) = &quot;Math&quot;
	mModules(6) = &quot;StartModule&quot;
	mModules(7) = &quot;Writer&quot;
	
	For Each sModName In mModules()
	
		ReDim mLines() &apos;reset data
		AppendItem(mLines(), Indent(0) &amp; &quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;UTF-8&quot;&quot;?&gt;&quot;)
		AppendItem(mLines(), Indent(0) &amp; &quot;&lt;oor:component-data xmlns:oor=&quot;&quot;http://openoffice.org/2001/registry&quot;&quot;&quot;)
		AppendItem(mLines(), Indent(0) &amp; &quot; xmlns:xs=&quot;&quot;http://www.w3.org/2001/XMLSchema&quot;&quot;&quot;)
		AppendItem(mLines(), Indent(0) &amp; &quot; oor:name=&quot;&quot;&quot; &amp; sModName &amp; &quot;WindowState&quot;&quot;&quot;)
		AppendItem(mLines(), Indent(0) &amp; &quot; oor:package=&quot;&quot;org.openoffice.Office.UI&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(1) &amp; &quot;&lt;node oor:name=&quot;&quot;UIElements&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(2) &amp; &quot;&lt;node oor:name=&quot;&quot;States&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(3) &amp; _
			&quot;&lt;node oor:name=&quot;&quot;private:resource/toolbar/addon_&quot; &amp; sToolbarID &amp; &quot;&quot;&quot; oor:op=&quot;&quot;replace&quot;&quot;&gt;&quot;)
		AppendItem(mLines(), Indent(4) &amp; &quot;&lt;prop oor:name=&quot;&quot;UIName&quot;&quot; oor:type=&quot;&quot;xs:string&quot;&quot;&gt;&quot;)
		&apos;set the toolbar UIname
		AppendItem(mLines(), Indent(5) &amp; &quot;&lt;value&gt;&quot; &amp; sToolbarName &amp; &quot;&lt;/value&gt;&quot;)
		&apos;add localized toolbar UInames
		For Each aStrPair In mToolbarTitleTranslations()
			AppendItem(mLines(), Indent(5) &amp; _
				&quot;&lt;value xml:lang=&quot;&quot;&quot; &amp; aStrPair.First &amp; &quot;&quot;&quot;&gt;&quot; &amp; _
				EscapeChars(aStrPair.Second) &amp; &quot;&lt;/value&gt;&quot;)
		Next
		AppendItem(mLines(), Indent(4) &amp; &quot;&lt;/prop&gt;&quot;)
		AppendItem(mLines(), Indent(3) &amp; &quot;&lt;/node&gt;&quot;)
		AppendItem(mLines(), Indent(2) &amp; &quot;&lt;/node&gt;&quot;)
		AppendItem(mLines(), Indent(1) &amp; &quot;&lt;/node&gt;&quot;)
		AppendItem(mLines(), Indent(0) &amp; &quot;&lt;/oor:component-data&gt;&quot;)
		
		&apos;store the file in the temp location
		Tools.UCB.SaveDataToFile(sOfficeUiDirUrl &amp; &quot;/&quot; &amp; sModName &amp; &quot;WindowState.xcu&quot;, mLines())
	Next
	
End Sub


&apos;______________________________________________________________________________________________
Sub ExportDialogLibrary(oDocument As Object, sLibName As String, sDestFolderUrl As String)
Dim sTempDocUrl As String
Dim oPackage As Object
Dim oPkgFolder As Object
Dim oPkgFile As Object
Dim oInpuStream As Object
Dim oFileAccess As Object
Dim sFileName As String
Dim sLocDestFolder As String

	&apos;store the document to a temporary location
	sTempDocUrl = GetTempFile()
	oDocument.StoreToUrl(sTempDocUrl, Array())

	&apos; Define the output dir
	oFileAccess = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	sLocDestFolder = ConvertToUrl(sDestFolderUrl)
	If Right(sLocDestFolder, 1) &lt;&gt; &quot;/&quot; Then
		sLocDestFolder = sLocDestFolder &amp; &quot;/&quot;
	End if
	sLocDestFolder = sLocDestFolder &amp; sLibName &amp; &quot;/&quot;
	oFileAccess.createFolder(sLocDestFolder)

	&apos; open the temp document as a zip package
	oPackage = createUnoService(&quot;com.sun.star.packages.Package&quot;)
	oPackage.initialize(Array(sTempDocUrl))
	oPkgFolder = oPackage.getByHierarchicalName(&quot;Dialogs/&quot; &amp; sLibName)
	
	&apos; extract files
	For Each sFileName In oPkgFolder.ElementNames()
		oPkgFile = oPkgFolder.getByName(sFileName)
		oInpuStream = oPkgFile.getInputStream()
		sFileName = AdaptDialogFileName(sFileName)
		oFileAccess.writeFile(sLocDestFolder &amp; sFileName, oInpuStream)
	Next
	
	&apos;remove temporary files
	oFileAccess.kill(sTempDocUrl)
	
End Sub


&apos;______________________________________________________________________________
Function AdaptDialogFileName(sName As String) As String
Dim sLocName As String
	
	&apos; sanity check
	If sName &lt; 5 Then Exit Function
	
	If sName = &quot;dialog-lb.xml&quot; Then
		&apos;rename the dialog library descriptor
		sLocName = &quot;dialog.xlb&quot;
	ElseIf Right(sName, 4) = &quot;.xml&quot; Then
		&apos;replace the extension of the dialog descriptor
		sLocName = Left(sName, Len(sName)-4) &amp; &quot;.xdl&quot;
	End If
	
	AdaptDialogFileName = sLocName
	
End Function


&apos;______________________________________________________________________________
&apos;### Deprecated!
Function GetMacroUrlFromDescriptor(aMacroDescriptor As Object) As String

	GetMacroUrlFromDescriptor = &quot;macro:///&quot; &amp; aMacroDescriptor.Library &amp; &quot;.&quot; &amp; _
		aMacroDescriptor.Module &amp; &quot;.&quot; &amp; aMacroDescriptor.Macro
End Function


&apos;______________________________________________________________________________
Function GetScriptURIFromDescriptor(aMacroDescriptor As Object) As String
Dim sScheme As String
Dim sPath As String
Dim sExtFullName$

	sScheme = &quot;vnd.sun.star.script:&quot;
	If aMacroDescriptor.Provider = &quot;Python&quot; Then
		&apos; Get name of extension OOnik.oxt -&gt; OOnik
		sExtFullName = GetDefaultPackageName()
		&apos;If sExtVersion &lt;&gt; &quot;&quot; Then sExtVersion = &quot;-&quot; &amp; sExtVersion 
		sPath = sExtFullName &amp; &quot;|&quot; &amp; sPyDirForLib &amp; &quot;|&quot;
		sPath = sPath &amp; aMacroDescriptor.Module &amp; &quot;$&quot;
		sPath = sPath &amp; aMacroDescriptor.Macro
		GetScriptURIFromDescriptor = sScheme &amp; sPath &amp; &quot;?language=Python&amp;location=user:uno_packages&quot;
	Else
		sPath = aMacroDescriptor.Library &amp; &quot;.&quot;
		sPath = sPath &amp; aMacroDescriptor.Module &amp; &quot;.&quot;
		sPath = sPath &amp; aMacroDescriptor.Macro
		GetScriptURIFromDescriptor = sScheme &amp; sPath &amp; &quot;?language=Basic&amp;location=application&quot;
	End If

End Function


&apos;______________________________________________________________________________
Function EscapeChars(sInString As String) As String
Dim sTemp As String
Dim oStrPair As Object
Dim I As Integer

	sTemp = sInString		
	
	If Len(sTemp) &gt; 0 Then
		
		Dim mStrPairs(4) As New com.sun.star.beans.StringPair
		
		&apos; &apos;&amp;&apos; has to be escaped as first,
		&apos; because other escape sequences contains it!
		mStrPairs(0).First = &quot;&amp;&quot; : mStrPairs(0).Second = &quot;&amp;amp;&quot;
		mStrPairs(1).First = &quot;&lt;&quot; : mStrPairs(1).Second = &quot;&amp;lt;&quot;
		mStrPairs(2).First = &quot;&gt;&quot; : mStrPairs(2).Second = &quot;&amp;gt;&quot;
		mStrPairs(3).First = &quot;&apos;&quot; : mStrPairs(3).Second = &quot;&amp;apos;&quot;
		mStrPairs(4).First = &quot;&quot;&quot;&quot; : mStrPairs(4).Second = &quot;&amp;quot;&quot;
		
		For I = LBound(mStrPairs()) To UBound(mStrPairs())
			oStrPair = mStrPairs(I)
			sTemp = StringReplace(sTemp , oStrPair.First, oStrPair.Second )
		Next I
		
		&apos;escape other accented chars and special symbols
		For I = 160 To 255
			sTemp = StringReplace(sTemp , Chr( I ), &quot;&amp;#&quot; &amp; I &amp; &quot;;&quot; )
		Next I
		
	End If
	
	EscapeChars= sTemp

End Function


&apos;______________________________________________________________________________
Function Indent(iTab As Integer) As String
	Indent = String(iTab, 9)
End Function


&apos;______________________________________________________________________________
Function GetImageId(aUIElement As Object) As String

Dim sSourceUrl As String
Dim sDestUrl As String
Dim sImgId As String
Dim sMime As String
Dim bImagePresent As Boolean

Static iImgCounter As Integer
	
	&apos;increment the counter
	iImgCounter = iImgCounter + 1
	&apos;set the image ID
	sImgId = &quot;image&quot; &amp; iImgCounter
	
	&apos;the format used for the output image
	sMime = &quot;image/x-MS-bmp&quot;
	
	sSourceUrl = aUIElement.LC16IconUrl
	If sSourceUrl &lt;&gt; &quot;&quot; Then
		sDestUrl = sIconDirUrl &amp; &quot;/&quot; &amp; sImgId &amp; &quot;_16.bmp&quot;
		ConvertImage(sSourceUrl, sDestUrl, sMime)
		bImagePresent = True
	End If
		
	sSourceUrl = aUIElement.LC26IconUrl
	If sSourceUrl &lt;&gt; &quot;&quot; Then
		sDestUrl = sIconDirUrl &amp; &quot;/&quot; &amp; sImgId &amp; &quot;_26.bmp&quot;
		ConvertImage(sSourceUrl, sDestUrl, sMime)
		bImagePresent = True
	End If
	
	sSourceUrl = aUIElement.HC16IconUrl
	If sSourceUrl &lt;&gt; &quot;&quot; Then
		sDestUrl = sIconDirUrl &amp; &quot;/&quot; &amp; sImgId &amp; &quot;_16h.bmp&quot;
		ConvertImage(sSourceUrl, sDestUrl, sMime)
		bImagePresent = True
	End If
		
	sSourceUrl = aUIElement.HC26IconUrl
	If sSourceUrl &lt;&gt; &quot;&quot; Then
		sDestUrl = sIconDirUrl &amp; &quot;/&quot; &amp; sImgId &amp; &quot;_26h.bmp&quot;
		ConvertImage(sSourceUrl, sDestUrl, sMime)
		bImagePresent = True
	End If
	
	&apos;check if at least one of the icons has been provided
	If bImagePresent Then
		GetImageId = sImgId
	Else
		GetImageId = &quot;&quot;
	End If
	
End Function


&apos;______________________________________________________________________________
Sub ConvertImage(sSrcUrl As String, sDestUrl As String, sMimeType As String )
Dim oGraph As Object
	
	Dim mArgsIn(1)as new com.sun.star.beans.PropertyValue
	mArgsIn(0).Name  = &quot;URL&quot;
	mArgsIn(0).Value = sSrcUrl
	oGraph = oGraphicProvider.queryGraphic(mArgsIn())
	
	
	Dim mArgsOut(1) as new com.sun.star.beans.PropertyValue
	mArgsOut(0).Name  = &quot;URL&quot;
	mArgsOut(0).Value = sDestUrl
	mArgsOut(1).Name  = &quot;MimeType&quot;
	mArgsOut(1).Value = sMimeType
	
	oGraphicProvider.storeGraphic(oGraph, mArgsOut())

End Sub







</script:module>